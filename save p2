type 'a tree =
  | Node of 'a tree * 'a * 'a tree
  | Leaf

(* Given a function f, accumulator init and tree, iterate over the given tree using f and return the iterated value of type 'a. *)
let rec tree_fold f init tree = match tree with
  | Leaf -> init
  | Node (left, root, right) -> 
    let left_node = tree_fold f init left
    in let right_node = tree_fold f init right
    in f left_node root right_node

(* Given a function f, map all the values of the nodes in the tree using f. The mapped tree should still return the same tree shape with the corresponding mapped nodes. *)
let map tree f = tree_fold (fun left_node root right_node -> Node (left_node, f root, right_node)) Leaf tree

(* This function return the given tree with the left and right branches swapped at each node. *)
let mirror tree = tree_fold (fun left_node root right_node -> Node (right_node, root, left_node)) Leaf tree

(* This function will return a list containing the inorder traversal of the tree. *)
let in_order tree = tree_fold (fun left_node root right_node -> left_node @ [root] @ right_node) [] tree

(* This function return a list containing the preorder traversal of the tree. *)
let pre_order tree = tree_fold (fun left_node root right_node -> [root] @ left_node @ right_node) [] tree

(* This function will take in a tree with the contains ('a -> 'a) functions as the value in the nodes and returns a function that is INORDER composition of the nodes. *)
let compose tree = tree_fold (fun left_func func right_func -> fun x -> right_func(func(left_func x))) (fun x -> x) tree

(* This function returns the depth of the deepest node in the tree. *)
let depth tree = tree_fold(fun left_depth depth right_depth -> 1 + max left_depth right_depth) 0 tree

(* This function takes in a perfect binary tree and an integer n, and trims off nodes at the bottom of the tree such that the depth of the returned tree is at most n. *)
(* Assume complete tree *)
let trim tree n = failwith("djhfjdks")
